/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.flink.kafka.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Dependency extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -538938383032489125L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Dependency\",\"namespace\":\"com.flink.kafka.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"batchSize\",\"type\":\"long\"},{\"name\":\"otherField\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Dependency> ENCODER =
      new BinaryMessageEncoder<Dependency>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Dependency> DECODER =
      new BinaryMessageDecoder<Dependency>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Dependency> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Dependency> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Dependency>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Dependency to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Dependency from a ByteBuffer. */
  public static Dependency fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public long batchSize;
  @Deprecated public long otherField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Dependency() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param batchSize The new value for batchSize
   * @param otherField The new value for otherField
   */
  public Dependency(java.lang.Long id, java.lang.Long batchSize, java.lang.Long otherField) {
    this.id = id;
    this.batchSize = batchSize;
    this.otherField = otherField;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return batchSize;
    case 2: return otherField;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: batchSize = (java.lang.Long)value$; break;
    case 2: otherField = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'batchSize' field.
   * @return The value of the 'batchSize' field.
   */
  public java.lang.Long getBatchSize() {
    return batchSize;
  }

  /**
   * Sets the value of the 'batchSize' field.
   * @param value the value to set.
   */
  public void setBatchSize(java.lang.Long value) {
    this.batchSize = value;
  }

  /**
   * Gets the value of the 'otherField' field.
   * @return The value of the 'otherField' field.
   */
  public java.lang.Long getOtherField() {
    return otherField;
  }

  /**
   * Sets the value of the 'otherField' field.
   * @param value the value to set.
   */
  public void setOtherField(java.lang.Long value) {
    this.otherField = value;
  }

  /**
   * Creates a new Dependency RecordBuilder.
   * @return A new Dependency RecordBuilder
   */
  public static com.flink.kafka.avro.Dependency.Builder newBuilder() {
    return new com.flink.kafka.avro.Dependency.Builder();
  }

  /**
   * Creates a new Dependency RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Dependency RecordBuilder
   */
  public static com.flink.kafka.avro.Dependency.Builder newBuilder(com.flink.kafka.avro.Dependency.Builder other) {
    return new com.flink.kafka.avro.Dependency.Builder(other);
  }

  /**
   * Creates a new Dependency RecordBuilder by copying an existing Dependency instance.
   * @param other The existing instance to copy.
   * @return A new Dependency RecordBuilder
   */
  public static com.flink.kafka.avro.Dependency.Builder newBuilder(com.flink.kafka.avro.Dependency other) {
    return new com.flink.kafka.avro.Dependency.Builder(other);
  }

  /**
   * RecordBuilder for Dependency instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Dependency>
    implements org.apache.avro.data.RecordBuilder<Dependency> {

    private long id;
    private long batchSize;
    private long otherField;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.flink.kafka.avro.Dependency.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.batchSize)) {
        this.batchSize = data().deepCopy(fields()[1].schema(), other.batchSize);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.otherField)) {
        this.otherField = data().deepCopy(fields()[2].schema(), other.otherField);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Dependency instance
     * @param other The existing instance to copy.
     */
    private Builder(com.flink.kafka.avro.Dependency other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.batchSize)) {
        this.batchSize = data().deepCopy(fields()[1].schema(), other.batchSize);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.otherField)) {
        this.otherField = data().deepCopy(fields()[2].schema(), other.otherField);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.flink.kafka.avro.Dependency.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.flink.kafka.avro.Dependency.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'batchSize' field.
      * @return The value.
      */
    public java.lang.Long getBatchSize() {
      return batchSize;
    }

    /**
      * Sets the value of the 'batchSize' field.
      * @param value The value of 'batchSize'.
      * @return This builder.
      */
    public com.flink.kafka.avro.Dependency.Builder setBatchSize(long value) {
      validate(fields()[1], value);
      this.batchSize = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'batchSize' field has been set.
      * @return True if the 'batchSize' field has been set, false otherwise.
      */
    public boolean hasBatchSize() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'batchSize' field.
      * @return This builder.
      */
    public com.flink.kafka.avro.Dependency.Builder clearBatchSize() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'otherField' field.
      * @return The value.
      */
    public java.lang.Long getOtherField() {
      return otherField;
    }

    /**
      * Sets the value of the 'otherField' field.
      * @param value The value of 'otherField'.
      * @return This builder.
      */
    public com.flink.kafka.avro.Dependency.Builder setOtherField(long value) {
      validate(fields()[2], value);
      this.otherField = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'otherField' field has been set.
      * @return True if the 'otherField' field has been set, false otherwise.
      */
    public boolean hasOtherField() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'otherField' field.
      * @return This builder.
      */
    public com.flink.kafka.avro.Dependency.Builder clearOtherField() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Dependency build() {
      try {
        Dependency record = new Dependency();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.batchSize = fieldSetFlags()[1] ? this.batchSize : (java.lang.Long) defaultValue(fields()[1]);
        record.otherField = fieldSetFlags()[2] ? this.otherField : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Dependency>
    WRITER$ = (org.apache.avro.io.DatumWriter<Dependency>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Dependency>
    READER$ = (org.apache.avro.io.DatumReader<Dependency>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
